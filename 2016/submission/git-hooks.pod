Title: Writing git hooks with Git::Hooks
Topic: Git::Hooks
Author: JMERELO <JMERELO@cpan.org>

=pod

=encoding utf8

=head1 Let's start with the hooks.

You are a developer, you are probably using git. You are using git,
you are probably using hooks too. I<hooks> are programs triggered by a
certain event in a git repo. You can find examples stashed in the
C<.git/hooks> directory. They are there just for the show, and they
are not used by default. However, it is very likely that if you use
some remote repository like GitHub or GitLab, this one might actually
be using these hooks to rebuild web pages, trigger deployments or
myriad other stuff. Both GitHub and GitLab allow us to configure them
quite easily via web.

However, the point of this article is to show you how to write them
yourself. So let's first find out what kind of events can trigger a
hook. The whole list is L<in the Git reference
page|https://git-scm.com/docs/githooks> and, in the last git version,
includes 19 different events. 

We can divide them in different ways; for instance, according to
I<when> they actually happen. C<pre> and C<post> happen before and
after a particular git command; for instance, C<pre-commit> hooks
happen before the actual commit, that is, before the actually commit
message is read. These C<pre> hooks can be used to implement policies
at the client level and can return a value that will indicate that the
particular action has failed; for instance, if a commit message
contains typos or fails company policy in some other way. There's even
a C<prepare> hook that happens right before the C<pre> hook is
triggered: C<prepare-commit-message>. On the other hand, C<post> hooks
do not affect the command itself, just the way the repository is
arranged after the command is run. A C<post-receive> hook, for
instance, can send an email to the user or administrator when a push
has been processed on a remote repository, or send a message to a
continous integration server, or trigger a rebuild of the web site. 

On the other hand, they can also be divided according to the git
command that triggers them. Four of them, are related to
C<commit>, others to C<am>, and yet others to C<push> and to
C<receive-pack>, a I<plumbing> command run when a push is received in
a repository. 

=head2 Subheading

=head2 Subheading

=head1 SEE ALSO

=for :list
* L<Bencher>
* L<Bencher::Scenario::LevenshteinModules>

=cut
