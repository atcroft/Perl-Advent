Title: Help Santa Klaus Reward Nice Children Only
Topic: modules
Author: Jerome Eteve <jerome.eteve@gmail.com>

=head1 ONCE UPON A TIME

It is 2016 and in Scotland, near the North Pole, Santa Klaus is having his annual financial review. And it doesn't look fantastic.

Next year, Santa is planning for cost reduction and has decided he will only reward children who have been nice through the year.

After consulting with the senior elves, they decide to implement a child niceness assessment process over the year.

It goes like that:

=over

=item The parents receive a letter from santa with a report form.

=item The due date for the report form is the 1st of November

=item If the filled-in form has not been received by this date, a reminder is sent by email

=item If no form has been received 2 weeks after the reminder, the child is considered naugthty.

=item A form that has been filed needs to be assigned to an elf for assessment, and the assessment process starts, which is another story.

=back

Santa's elves are not very enthousiastic with implementing this in Perl. How do design these processes so we minimize the mess? How do we unit test that so things don't randomly fail in the future?

Stop panicking says Rudolf, I've found L<Schedule::LongSteps> on the CPAN!

L<Schedule::LongSteps> is a small framework that enables you to program and to unit test the future with confidence, here's how to implement the Form gathering process.

=cut



=head1 SEE ALSO
