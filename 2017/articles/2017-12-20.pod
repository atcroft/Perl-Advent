Title: Reindeer
Topic: Reindeer
Author: Mark Fowler <mark@twoshortplanks.com>

This year the Elves at the North Pole had learnt a lot about powerful packages
they could load to improve Moose.  The problem was that things were getting
a little on the long winded size:

    package ChristmasTree;

    use Moose;
    use MooseX::AttributeShortcuts;
    use MooseX::StrictConstructor;
    use MooseX::ClassAttributes;
    use MooseX::AutoDestruct;
    use MooseX::CascadeClearing;
    use MooseX::UndefTolerant::Attribute;

    ...

It was enough to make the Wise Old Elf's RSI flair up.  Something had to be
done.  It was time for something better than Moose.

What's better than Moose for one of Santa's Elves?  That's right: L<Reindeer>.
Still the same thing, but with more aerodynamic antlers - and the ability to
fly around the world.

The Reindeer module from the CPAN is a wrapper for Moose that not only loads
Moose into your class but loads a whole bunch of handy Moose extensions too.
In fact, the above code could simply be replaced by:

    package ChristmasTree;
    use Reindeer;

=head2 All our Favourite Extensions



=head2 Type Libraries

Reindeer exports a bunch of type libraries into your code.  This means, for
example, instead of writing:

    has counter => ( is => 'ro', isa => 'Int', default => 0 );

You can write:

    has counter => ( is => 'ro', isa => Int, default => 0 );

Not only do you save those two characters, by passing a named exported type
(which actually is a zero parameter function name starting with a capital letter
that returns the name of the type - but that's not important right now) you get
compile time checking of your type names, making sure you haven't typoed
anything.

=head2 Trait Aliases

Similarly Reindeer exports

So instead of writing:

    use 
    has home => ( is => 'ro', trait => [ 'ENV' ])

=head2 Extra Keywords





